{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","data","SetData","_useState3","_useState4","results","setResult","react_default","a","createElement","style","backgroundColor","className","onKeyUp","e","target","value","autoFocus","type","onClick","axios","get","params","search","then","shows","map","Fragment","width","src","concat","image_path","alt","name","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPA6DeA,MAzDf,WAAe,IAAAC,EACWC,mBAAS,IADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACAI,EADAJ,EAAA,GAAAK,EAEgBN,mBAAS,IAFzBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEGE,EAFHF,EAAA,GAmBb,OACEG,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,gBAAgB,qBAAuBC,UAAU,uBAC9DL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,iBAAgBL,EAAAC,EAAAC,cAAA,gCAE5BF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,qFACAF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,SAAOG,UAAU,qBAAqBC,QAxBpC,SAACC,GACXZ,EAAQY,EAAEC,OAAOC,QAuB2CC,WAAS,IACrEV,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASC,QArBL,WACrBC,IAAMC,IAAI,yCAA0C,CAClDC,OAAO,CACLC,OAAQtB,KAETuB,KAAK,SAAAvB,GACNK,EAAUL,EAAKA,KAAKwB,UAeyBb,UAAU,yBAArD,gBAKJL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACZP,EAAQqB,IAAI,SAAAzB,GACX,OACEM,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACLpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kCACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAOF,MAAO,CAAEkB,MAAO,UACrCrB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAAeiB,IAAG,qBAAAC,OAAuB7B,EAAK8B,YAAcC,IAAK/B,EAAKgC,OACrF1B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,aAAaX,EAAKgC,gBClCfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.1dc7c6e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [data, SetData] = useState('');\n  const [results, setResult] = useState([]);\n\n  const set = (e) => {\n    SetData(e.target.value);\n  }\n\n  const getResults = () => {\naxios.get('https://similar.tv/api/v1/shows/search', {\n  params:{\n    search: data\n  }\n}).then(data => {\n  setResult(data.data.shows);\n});\n  }\n\n\n  return (\n    <div>\n<nav style={{ backgroundColor:'rgb(239, 100, 55)' }} className=\"navbar navbar-light\">\n <p className=\"text-white h4\"><b>Similiar Tv shows</b></p>\n</nav>\n  <div className=\"container\">\n  <div className=\"card mt-5\">\n  <div className=\"card-body\">\n    <b>Search similar shows like the one you like most search below in text box</b>\n    <center><input className=\"form-control mt-3 \" onKeyUp={set} autoFocus/>\n    <button type=\"button\" onClick={getResults} className=\" mt-3 btn btn-primary\">Get shows</button>\n    </center>\n  </div>\n</div>\n\n<div className=\"mt-5 row\">\n  {results.map(data => {\n    return (\n      <React.Fragment>\n <div className=\"col xl-4 lg-4 sm-12 md-6 xs-12\">\n <div className=\"card\" style={{ width: '18rem'}}>\n  <img className=\"card-img-top\" src={`https://similar.tv${data.image_path}`} alt={data.name}/>\n  <div className=\"card-body\">\n    <p className=\"card-text\">{data.name}</p>\n  </div>\n</div>\n</div>\n      </React.Fragment>\n    )\n  })}\n \n</div>\n  </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}